¿Qúe es Redux, cuándo usarlo y porqué?
En esta clase el profesor Rodolfo Saldívar Hernández nos explicará qué es Redux, cómo usarlo y por qué; junto con sus principios como lo son el almacenamiento, es inmutable y centralizado. Redux es nuestra única fuente de la verdad.

Redux es un contenedor predecible del estado de aplicaciones JavaScript. Te ayuda a escribir aplicaciones que se comportan de manera consistente, corren en distintos ambientes (cliente, servidor y nativo), y son fáciles de probar.

Introducción: las fases de Redux
Los cuatro pilares de Redux son:

Store: Almacenamiento
Reducers: Estados
Action Creators: Funciones
Componente: Código JSX

Store
El store tiene las siguientes responsabilidades:

Contiene el estado de la aplicación
Permite el acceso al estado vía getState()
Permite que el estado sea actualizado vía dispatch(action)
Registra los listeners vía subscribe(listener)
Maneja la anuliación del registro de los listeners via el retorno de la función de subscribe(listener)

npm install redux react-redux

Reducers
Las Action Creators describen que algo pasó, pero no especifican cómo cambió el estado de la aplicación en respuesta. Esto es trabajo de los reducers.

El Provider es el componente de Redux en el cual encerraremos nuestra aplicación para que puedan comunicarse los componentes entre ellos.

Redux Thunk
Redux Thunk permite a las action creators invertir el control despachando funciones. Van a recibir dispatch como argumento y capaz llamarlo asíncronamente. Estas funciones son llamas thunks.

npm install redux-thunk

Explicación teórica: ciclo completo de Redux
Cuando nuestro componente terminar de cargar (componentDidMount) llama al Action Creator, luego el Action Creator contiene la promesa, trae los datos necesarios y luego va y modifica al Reducer para que actualice el estado usando dispatch() y luego lo actualizamos en el componente con el mapStateToProps.

Si no tenemos estos pasos no nos va a funcionar.